jira.Automation When_a_deployment_is_completed__failed_or_canceled___then_transition_request_accordingly_GWR_svc_mgt_2@sssszdssss_08594ssssusss {
  name = "When a deployment is completed, failed or canceled → then transition request accordingly"
  state = "ENABLED"
  description = "Transitions a change request to completed, failed, or canceled, based on the outcome of a deployment."
  authorAccountId = {
    id = "61980f073618cd006f48823b"
    displayName = "Geoffrey Routledge"
  }
  actor = {
    type = "ACCOUNT_ID"
    value = {
      id = "61980f073618cd006f48823b"
      displayName = "Geoffrey Routledge"
    }
  }
  trigger = {
    component = "TRIGGER"
    type = "devops.deploy.event.trigger:statechange"
    value = {
      environments = [
        "production",
      ]
      states = [
        "successful",
        "failed",
        "cancelled",
        "in_progress",
      ]
    }
    children = [
    ]
    conditions = [
    ]
  }
  components = [
    {
      component = "CONDITION"
      type = "jira.jql.condition"
      children = [
      ]
      conditions = [
      ]
      rawValue = "\"Ticket category\" = Changes"
    },
    {
      component = "CONDITION"
      type = "jira.condition.container.block"
      children = [
        {
          component = "CONDITION_BLOCK"
          type = "jira.condition.if.block"
          value = {
            conditionMatchType = "ALL"
          }
          children = [
            {
              component = "ACTION"
              type = "jira.issue.transition"
              value = {
                operations = [
                  {
                    field = {
                      type = "ID"
                      value = jira.Field.instance.Resolution__resolution
                    }
                    fieldType = "resolution"
                    type = "SET"
                    value = {
                      type = "ID"
                      value = jira.Resolution.instance.Done
                    }
                  },
                ]
                sendNotifications = true
                destinationStatus = {
                  type = "ID"
                  value = jira.Status.instance.completed
                }
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
          conditions = [
            {
              component = "CONDITION"
              type = "jira.comparator.condition"
              value = {
                first = "{{deployment.state}}"
                second = "successful"
                operator = "EQUALS"
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
        },
        {
          component = "CONDITION_BLOCK"
          type = "jira.condition.if.block"
          value = {
            conditionMatchType = "ALL"
          }
          children = [
            {
              component = "ACTION"
              type = "jira.issue.transition"
              value = {
                operations = [
                  {
                    field = {
                      type = "ID"
                      value = jira.Field.instance.Resolution__resolution
                    }
                    fieldType = "resolution"
                    type = "SET"
                    value = {
                      type = "ID"
                      value = jira.Resolution.instance.Done
                    }
                  },
                ]
                sendNotifications = true
                destinationStatus = {
                  type = "ID"
                  value = jira.Status.instance.failed
                }
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
          conditions = [
            {
              component = "CONDITION"
              type = "jira.comparator.condition"
              value = {
                first = "{{deployment.state}}"
                second = "failed"
                operator = "EQUALS"
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
        },
        {
          component = "CONDITION_BLOCK"
          type = "jira.condition.if.block"
          value = {
            conditionMatchType = "ALL"
          }
          children = [
            {
              component = "ACTION"
              type = "jira.issue.transition"
              value = {
                operations = [
                  {
                    field = {
                      type = "ID"
                      value = jira.Field.instance.Resolution__resolution
                    }
                    fieldType = "resolution"
                    type = "SET"
                    value = {
                      type = "ID"
                      value = jira.Resolution.instance.Done
                    }
                  },
                ]
                sendNotifications = true
                destinationStatus = {
                  type = "ID"
                  value = jira.Status.instance.canceled
                }
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
          conditions = [
            {
              component = "CONDITION"
              type = "jira.comparator.condition"
              value = {
                first = "{{deployment.state}}"
                second = "cancelled"
                operator = "EQUALS"
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
        },
        {
          component = "CONDITION_BLOCK"
          type = "jira.condition.if.block"
          value = {
            conditionMatchType = "ALL"
          }
          children = [
            {
              component = "ACTION"
              type = "jira.issue.transition"
              value = {
                operations = [
                ]
                sendNotifications = true
                destinationStatus = {
                  type = "ID"
                  value = jira.Status.instance.implementing
                }
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
          conditions = [
            {
              component = "CONDITION"
              type = "jira.comparator.condition"
              value = {
                first = "{{deployment.state}}"
                second = "in_progress"
                operator = "EQUALS"
              }
              children = [
              ]
              conditions = [
              ]
            },
          ]
        },
      ]
      conditions = [
      ]
    },
  ]
  canOtherRuleTrigger = false
  notifyOnError = "FIRSTERROR"
  projects = [
    {
      projectId = jira.Project.instance.GWR_svc_mgt_2@s
    },
  ]
  labels = [
    jira.AutomationLabel.instance.Change_management@s,
  ]
  tags = [
    {
      tagType = "CREATION_TYPE"
      tagValue = "AUTO"
      ruleIdUuid = "018f1130-4057-746f-a020-1c0b02b69aa4"
    },
    {
      tagType = "SAMPLE_RULE"
      tagValue = "service_desk"
      ruleIdUuid = "018f1130-4057-746f-a020-1c0b02b69aa4"
    },
    {
      tagType = "SAMPLE_RULE_INTENT"
      tagValue = "change_management_deployment_state"
      ruleIdUuid = "018f1130-4057-746f-a020-1c0b02b69aa4"
    },
    {
      tagType = "TEMPLATE_ID"
      tagValue = "cm_template_2"
      ruleIdUuid = "018f1130-4057-746f-a020-1c0b02b69aa4"
    },
  ]
  writeAccessType = "UNRESTRICTED"
  collaborators = [
  ]
  billingType = "SYSTEM"
  _alias = "When a deployment is completed, failed or canceled → then transition request accordingly"
}
